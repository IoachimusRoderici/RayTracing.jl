var documenterSearchIndex = {"docs":
[{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/#Ray-Types","page":"API Reference","title":"Ray Types","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Modules = [RayTracing]\nPages = ray_pages\nOrder = [:type]\nPrivate = false","category":"page"},{"location":"api_reference/#RayTracing.AbstractRay","page":"API Reference","title":"RayTracing.AbstractRay","text":"abstract type AbstractRay{ND, T <: Real}\n\nRepresents a ray in ND dimensions that uses the type T for numeric calculations.\n\nAll rays have a position and a direction, and each concrete type may carry additional information.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#RayTracing.BasicRay","page":"API Reference","title":"RayTracing.BasicRay","text":"BasicRay{ND, T} <: AbstractRay{ND, T}\n\nA basic implementation of a ray in ND dimensions with arithmetic type T.\n\nOnly stores a current position and a direction.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#RayTracing.BasicRay-Tuple{Any, Any}","page":"API Reference","title":"RayTracing.BasicRay","text":"BasicRay{ND, T}(pos, dir) where {ND, T}\nBasicRay(pos, dir)\n\nConstruct a BasicRay{ND, T} with position pos and direction dir.\n\nWith the second signature, ND and T are determined automatically from the arguments.\n\nThe direction is normalized before costruction.\n\nBoth arguments should be vectors of length ND and element type T. Both are copied so that later changes to the objects passed as arguments don't affect the constructed ray.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Ray-Interface","page":"API Reference","title":"Ray Interface","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Modules = [RayTracing]\nPages = ray_pages\nOrder = [:function]","category":"page"},{"location":"api_reference/#Base.eltype-Union{Tuple{Type{<:AbstractRay{ND, T}}}, Tuple{T}, Tuple{ND}} where {ND, T}","page":"API Reference","title":"Base.eltype","text":"Base.eltype(::Type{<:AbstractRay})\nBase.eltype(::AbstractRay)\n\nReturn the numeric type used by a ray object or a ray type.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#Base.ndims-Union{Tuple{Type{<:AbstractRay{ND, T}}}, Tuple{T}, Tuple{ND}} where {ND, T}","page":"API Reference","title":"Base.ndims","text":"Base.ndims(::Type{<:AbstractRay})\nBase.ndims(::AbstractRay)\n\nReturn the number of dimensions of a ray object or a ray type.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#RayTracing.advance!-Tuple{Any, Any}","page":"API Reference","title":"RayTracing.advance!","text":"advance!(ray, distance)\n\nAdvances the ray by the given distance in its current direction.\n\n\n\n\n\n","category":"method"},{"location":"api_reference/#RayTracing.direction","page":"API Reference","title":"RayTracing.direction","text":"direction(ray)\n\nReturn the current direction of the ray, as a mutable reference.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#RayTracing.position","page":"API Reference","title":"RayTracing.position","text":"Base.position(ray)\nRayTracing.position(ray)\n\nReturn the current position of the ray, as a mutable reference.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Scene-Types","page":"API Reference","title":"Scene Types","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Modules = [RayTracing]\nPages = scene_pages\nOrder = [:type]","category":"page"},{"location":"api_reference/#RayTracing.AbstractScene","page":"API Reference","title":"RayTracing.AbstractScene","text":"abstract type AbstractScene\n\nA set of objects that rays can bounce on.\n\nIncludes information about the geometry of the objects and also about surface properties.\n\nSee also: SceneGeometry.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#RayTracing.SceneGeometry","page":"API Reference","title":"RayTracing.SceneGeometry","text":"abstract type SceneGeometry\n\nA geometric description of a set of objects.\n\nSimilar to AbstractScene, but only contains geometric information. Scenes can be created by adding surface information to existing scene geometries.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#RayTracing.BallPit","page":"API Reference","title":"RayTracing.BallPit","text":"BallPit{ND, T} <: SceneGeometry\n\nA set of same-size spheres in ND dimensions with arithmetic type T.\n\nThe arguments for the constructor are:\n\nr::T, the radius of the spheres.\ncenters::Vector{Point{ND, T}}, the centers of the spheres.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Scene-Interface","page":"API Reference","title":"Scene Interface","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Modules = [RayTracing]\nPages = scene_pages\nOrder = [:function]\nPrivate = false","category":"page"},{"location":"rays/#rays_page","page":"Rays","title":"Rays","text":"","category":"section"},{"location":"rays/","page":"Rays","title":"Rays","text":"A ray is a point object[1] that moves in a straight line at constant velocity. When rays intersect with the surface of an object, they \"bounce\" by changing their direction in some way (for example, inverting their velocity vector with respect to the object's surface).","category":"page"},{"location":"rays/","page":"Rays","title":"Rays","text":"[1]: A point object is a small object that is treated as a dot to simplify calculations.","category":"page"},{"location":"rays/#The-Ray-Interface","page":"Rays","title":"The Ray Interface","text":"","category":"section"},{"location":"rays/","page":"Rays","title":"Rays","text":"Rays in this package are represented by subtypes of AbstractRay{ND, T}. All ray types have (at least) two parameters:","category":"page"},{"location":"rays/","page":"Rays","title":"Rays","text":"ND: the number of dimensions that the ray exists in.\nT <: AbstractFloat: the numeric type used internally by the ray struct.","category":"page"},{"location":"rays/","page":"Rays","title":"Rays","text":"The following functions are defined for all ray types and comprise the public interface for rays:","category":"page"},{"location":"rays/","page":"Rays","title":"Rays","text":"eltype\nndims\nposition\ndirection\nadvance!\nTODO: add direction! function","category":"page"},{"location":"rays/","page":"Rays","title":"Rays","text":"Additional functions may exist for each ray type.","category":"page"},{"location":"rays/#BasicRay","page":"Rays","title":"BasicRay","text":"","category":"section"},{"location":"rays/","page":"Rays","title":"Rays","text":"TODO: docs for basic ray","category":"page"},{"location":"rays/#StepRecorder","page":"Rays","title":"StepRecorder","text":"","category":"section"},{"location":"rays/","page":"Rays","title":"Rays","text":"TODO: docs for step recorder","category":"page"},{"location":"plots/#Plots-With-Makie.jl","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"","category":"section"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"CurrentModule = MakieExtension","category":"page"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"This package has a plotting extension that is activated when Makie.jl is loaded.","category":"page"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"The extension adds some recipes to make it easier to plot some ray and scene types.","category":"page"},{"location":"plots/#BallPit","page":"Plots With Makie.jl","title":"BallPit","text":"","category":"section"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"BallPit scenes can be drawn with a scatter plot. The ballpitplot recipe is just a scatter with circular markers of the correct size.","category":"page"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"The name ballpitplot is not exported, but there is an overload for Makie.plottype so that ballpitplot is always called when plotting BallPits.","category":"page"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"ballpitplot","category":"page"},{"location":"plots/#MakieExtension.ballpitplot","page":"Plots With Makie.jl","title":"MakieExtension.ballpitplot","text":"ballpitplot(scene::BallPit)\n\nPlot a scatter of spheres as defined by the scene.\n\nKeyword arguments are passed on to scatter.\n\n\n\n\n\n","category":"function"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"TODO: add example","category":"page"},{"location":"plots/#StepRecorder","page":"Plots With Makie.jl","title":"StepRecorder","text":"","category":"section"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"Argument conversion is setup from StepRecorder rays to PointBased plots so that lines, scatter, etc. can be used.","category":"page"},{"location":"plots/","page":"Plots With Makie.jl","title":"Plots With Makie.jl","text":"TODO: add example","category":"page"},{"location":"scenes/#scenes_page","page":"Scenes","title":"Scenes","text":"","category":"section"},{"location":"scenes/","page":"Scenes","title":"Scenes","text":"A scene is a geometric description of set of surfaces that rays con bounce on. Scenes in this package are represented by subtypes of AbstractScene.","category":"page"},{"location":"scenes/","page":"Scenes","title":"Scenes","text":"The following functions are defined for all scene types and comprise the public interface for scenes:","category":"page"},{"location":"scenes/","page":"Scenes","title":"Scenes","text":"TODO: define a better scene interface.","category":"page"},{"location":"scenes/#BallPit","page":"Scenes","title":"BallPit","text":"","category":"section"},{"location":"scenes/","page":"Scenes","title":"Scenes","text":"TODO: docs for BallPit","category":"page"},{"location":"#RayTracing.jl","page":"Home","title":"RayTracing.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package aims to provide general porpuse tools to create ray tracing simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are two components to this package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rays: Objects that move in straight lines starting from a given position and direction. These can be used to represent light, color, sound, particles, etc.\nScenes: Sets of surfaces that rays bounce on.","category":"page"}]
}
